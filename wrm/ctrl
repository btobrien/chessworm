#!/bin/bash

tput smcup
stty -echo; tput civis

config=~/.config/wrm
mkdir -p $config
tree=${1:-$config/default}
tree=$(realpath $tree)
mkdir -p $(dirname $tree); touch $tree
tree_string=$(cut -d':' -f2 <$tree)

tmp=$config/tmp/$$
mkdir -p $tmp
modl_fifo=$tmp/modl.fifo; mkfifo $modl_fifo
disp_lock=$tmp/disp.lock; rm -r $disp_lock 2>/dev/null
hist=$tmp/hist.txt
flip=$tmp/flip.bool

cd $(dirname $0)
./modl <$modl_fifo | tee $hist | ./view $flip $disp_lock &

trap "echo exit >$modl_fifo; rm -r $tmp; tput rmcup; stty echo; tput cnorm" EXIT #rmcup on background interupt too

echo "read $tree_string" >$modl_fifo

while read -n1 key; do

	if [ "$key" == ':' ]; then
		while ! mkdir $disp_lock 2>/dev/null; do
			sleep 0.1
		done
		tput cup $(tput lines) 0; tput cuu1
		tput cnorm; stty echo 
		read -p':' -e line
		tput civis
		tput cuu1; tput el
		stty -echo
		rm -r $disp_lock
		if [ "$line" = 'f' ]; then
			if [ -f $flip ]; then
				rm $flip
			else
				touch $flip
			fi
		elif [ "$(cut -d' ' -f1 <<<$line)" = 'board' ]; then
			cp ~/bin/$(cut -d' ' -f2 <<<$line) ~/bin/board   # have specific board disp dir
		elif [ "$line" = 'w' ]; then
			tail -1 $hist >$tree
		elif [ "$line" = 'wq' ]; then
			tail -1 $hist >$tree
			exit
		elif [ "$line" = 'q' ]; then
			exit
		fi
		echo print >$modl_fifo
		continue
	fi

	if [ "$key" == 'c' ]; then
		read -n1 key
		if [ "$key" == 'c' ]; then
			echo chop >$modl_fifo
			key='n'
			sleep 0.1
		fi
	elif [ "$key" == 'N' ]; then
		echo prev >$modl_fifo
		key='n'
		sleep 0.1
	fi

	if [ "$key" == 'n' ]; then
		while ! mkdir $disp_lock 2>/dev/null; do
			sleep 0.1  #flock??
		done
		clock=$(tail -1 <$hist | cut -d':' -f4 | sed 's/ //')'. '
		tput cup $(tput lines) 0; tput cuu1
		tput cnorm; stty echo 
		read -p"$clock" -e move
		tput civis
		tput cuu1; tput el
		stty -echo
		rm -r $disp_lock

		[ "$move" == '' ] && continue
		echo move "$(tail -1 <$hist | cut -d':' -f1)" $move >$modl_fifo

	elif [ "$key" == 'g' ]; then
		read -n1 key
		if [ "$key" == 'g' ]; then
			echo start >$modl_fifo
		elif [ "$key" == 'o' ]; then
			echo snap_first >$modl_fifo
		elif [ "$key" == 'i' ]; then
			echo branch_last >$modl_fifo
		fi
	elif [ "$key" == 'd' ]; then
		read -n1 key
		if [ "$key" == 'd' ]; then
			echo chop >$modl_fifo
		elif [ "$key" == 'o' ]; then
			echo chop_branch >$modl_fifo
		fi
	elif [ "$key" == 'k' ]; then
		echo prev >$modl_fifo
	elif [ "$key" == 'j' ]; then
		echo next >$modl_fifo
	elif [ "$key" == 'G' ]; then
		echo end >$modl_fifo
	elif [ "$key" == 'o' ]; then
		echo snap >$modl_fifo
	elif [ "$key" == 'O' ]; then
		echo snap_first >$modl_fifo
	elif [ "$key" == 'i' ]; then
		echo branch >$modl_fifo
	elif [ "$key" == 'I' ]; then
		echo branch_last >$modl_fifo
	elif [ "$key" == 'u' ]; then
		echo promote >$modl_fifo
	elif [ "$key" == 'U' ]; then
		echo promote_first >$modl_fifo
	elif [ "$key" == 'z' ]; then
		printf '\a'
	elif [ "$key" == 'L' ]; then
		clear
		echo print >$modl_fifo
	fi
done
