#!/bin/bash

clear
stty -echo
tput civis

graph=${1:-default}

cd $(dirname $0)
modl_fifo=.impl/wrm/ctrl/fifos/$$
mkdir -p $(dirname $modl_fifo)
mkfifo $modl_fifo

hist_file=$HOME/.impl/wrm/state/$graph/hist.txt
mkdir -p $(dirname $hist_file)

./modl $graph <$modl_fifo  | tee -a $hist_file | ./view &

trap "echo exit >$modl_fifo; rm -f $modl_fifo; stty echo; tput cnorm" EXIT

echo '-'>$modl_fifo
while read -n1 key; do

	if [ "$key" == ':' ]; then
		tput cup $(tput lines) 0
		tput cnorm
		stty echo
		read -p':' -e line;
		stty -echo
		tput civis

		[ "line" == '' ] && continue

		if [ "$line" = 'q' ]; then
			clear
			exit
		fi

		if [ "$line" == 'vim' ]; then
			vim ~/.vimrc
			continue
		fi

		clear
		continue
	fi

	if [ "$key" == '/' ]; then
		tput cup $(tput lines) 0
		printf '/'
		move=''
		while true; do
			read -n1 -r key
			[ "$key" == '' ] && break
			if [ "$key" == '`' ]; then
				echo print >$modl_fifo
				move=''
				break
			fi
			if [ "$key" == 'H' ]; then
				[ "$move" == '' ] && continue
				printf '\b \b'
				move=$(sed 's/.$//'<<<$move)
				continue
			fi
			printf $key
			move=$move$key
		done

		if [ "$move" == '' ]; then
			continue
		fi

		echo move "$(tail -1 <$hist_file)" $move >$modl_fifo
		continue
	fi

	if [ "$key" == 'k' ]; then
		echo prev >$modl_fifo
	elif [ "$key" == 'j' ]; then
		echo next >$modl_fifo
	elif [ "$key" == 'g' ]; then
		read -n1 key
		if [ "$key" == 'g' ]; then
			echo first >$modl_fifo
		fi
	elif [ "$key" == 'G' ]; then
		echo last >$modl_fifo
	elif [ "$key" == 'o' ]; then
		echo snap >$modl_fifo
	elif [ "$key" == 'i' ]; then
		echo rebranch >$modl_fifo
	elif [ "$key" == 'f' ]; then
		echo flip >$modl_fifo
	fi


done
																																					
