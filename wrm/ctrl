clear
stty -echo
tput civis

tree=${1:-$HOME/.impl/wrm/default}
touch $tree
tree_string=$(cut -d':' -f2 <$tree)

cd $(dirname $0)
modl_fifo=.impl/wrm/ctrl/fifos/$$
mkdir -p $(dirname $modl_fifo)
mkfifo $modl_fifo
disp_lock=.impl/wrm/ctrl/locks/$$
mkdir -p $(dirname $disp_lock)
rm -r $disp_lock 2>/dev/null

hist=$HOME/.impl/wrm/state/$$/hist.txt
flip=$HOME/.impl/wrm/state/flip
mkdir -p $(dirname $hist)

./modl $tree <$modl_fifo | tee $hist | ./view $flip $disp_lock &

trap "echo exit >$modl_fifo; rm -f $modl_fifo; stty echo; tput cnorm" EXIT

echo "read $tree_string" >$modl_fifo
echo print >$modl_fifo
while read -n1 key; do

	if [ "$key" == ':' ]; then
		tput cup $(tput lines) 0
		printf ':'
		line=''
		while true; do
			read -n1 -r key
			[ "$key" == '' ] && break
			if [ "$key" == '`' ]; then
				echo print >$modl_fifo
				line=''
				break
			fi
			if [ "$key" == 'H' ]; then
				[ "$line" == '' ] && continue
				printf '\b \b'
				line=$(sed 's/.$//'<<<$line)
				continue
			fi
			printf $key
			line=$line$key
		done

		[ "$line" == '' ] && continue

		if [ "$line" = 'f' ]; then
			if [ -f $flip ]; then
				rm -r $flip
			else
				touch $flip
			fi
			echo print >$modl_fifo
			continue
		elif [ "$line" = 'q' ]; then
			clear
			exit
		elif [ "$line" = 'w' ]; then
			cd - >/dev/null
			tail -1 $hist >$tree
			cd - >/dev/null
		fi
		echo print >$modl_fifo
		continue
	fi

	if [ "$key" == 'c' ]; then
		read -n1 key
		if [ "$key" == 'c' ]; then
			echo chop >$modl_fifo
			key='n'
			sleep 0.1
		fi
	fi

	if [ "$key" == 'N' ]; then
		echo prev >$modl_fifo
		key='n'
		sleep 0.1
	fi

	if [ "$key" == 'n' ]; then
		while ! mkdir $disp_lock 2>/dev/null; do
			sleep 0.1
		done
		tput cup $(tput lines) 0
		printf '/'
		move=''
		while true; do
			read -n1 -r key
			[ "$key" == '' ] && break
			if [ "$key" == '`' ]; then
				echo print >$modl_fifo
				move=''
				break
			fi
			if [ "$key" == 'H' ]; then
				[ "$move" == '' ] && continue
				printf '\b \b'
				move=$(sed 's/.$//'<<<$move)
				continue
			fi
			printf $key
			move=$move$key
		done
		rm -r $disp_lock

		[ "$move" == '' ] && continue

		echo move "$(tail -1 <$hist | cut -d':' -f1)" $move >$modl_fifo
		continue
	fi


	if [ "$key" == 'g' ]; then
		read -n1 key
		if [ "$key" == 'g' ]; then
			echo start >$modl_fifo
		elif [ "$key" == 'o' ]; then
			echo snap_first >$modl_fifo
		elif [ "$key" == 'i' ]; then
			echo branch_last >$modl_fifo
		fi

	elif [ "$key" == 'd' ]; then
		read -n1 key
		if [ "$key" == 'd' ]; then
			echo chop >$modl_fifo
		elif [ "$key" == 'o' ]; then
			echo chop_branch >$modl_fifo
		fi

	elif [ "$key" == 'k' ]; then
		echo prev >$modl_fifo
	elif [ "$key" == 'j' ]; then
		echo next >$modl_fifo
	elif [ "$key" == 'G' ]; then
		echo end >$modl_fifo
	elif [ "$key" == 'o' ]; then
		echo snap >$modl_fifo
	elif [ "$key" == 'O' ]; then
		echo snap_oldest >$modl_fifo
	elif [ "$key" == 'i' ]; then
		echo branch >$modl_fifo
	elif [ "$key" == 'I' ]; then
		echo branch_youngest >$modl_fifo
	elif [ "$key" == 'u' ]; then
		echo promote >$modl_fifo
	elif [ "$key" == 'U' ]; then
		echo promote_first >$modl_fifo
	elif [ "$key" == 'p' ]; then
		echo demote >$modl_fifo
	elif [ "$key" == 'P' ]; then
		echo demote_last >$modl_fifo
	elif [ "$key" == 'z' ]; then
		printf '\a'
	elif [ "$key" == 'L' ]; then
		clear
		echo print >$modl_fifo
	fi


done
																																					
