#!/bin/bash

tput smcup
stty -echo; tput civis
set -o pipefail

config=$HOME/.config/wrm
mkdir -p $config

tree=${1:-$config/default}
tree=$(realpath $tree)
mkdir -p $(dirname $tree); touch $tree

graph=${GRAPH:-$config/graph}
graph=$(realpath $graph)
mkdir -p $graph

brd new wrm

scope=$config/scope/$$
mkdir -p $scope
zipline=$scope/zipline; mkfifo $zipline
hist=$scope/hist.txt

cd $(dirname $0)

./engn <$zipline | zipline $tree | tee $hist | ./view &
echo 'print' >$zipline

trap "echo exit >$zipline; rm -r $scope; stty echo; tput cnorm; tput rmcup" EXIT #rmcup on background interupt too

while read -n1 key; do
	if [ "$key" == 'j' ]; then
		echo next >$zipline
        continue
	elif [ "$key" == 'k' ]; then
		echo prev >$zipline
        continue
    fi

	if [ "$key" == ':' ]; then
		tput cup $(tput lines) 0; tput cuu1
		tput cnorm; stty echo 
		read -p':' -e line
		tput cuu1; tput el
		stty -echo

		if [ "$line" = 'f' ]; then
            brd flip wrm
		elif [ "$(cut -d' ' -f1 <<<$line)" = 'board' ]; then
			pieces=$(cut -d' ' -f2 <<<$line)
            brd pieces=$pieces wrm
		elif [ "$line" = 'w' ]; then
            clear
		elif [ "$line" = 'wq' ]; then
			exit
		elif [ "$line" = 'q' ]; then
            clear
			exit
		fi

		echo print >$zipline
		continue
	fi

	if [ "$key" == 'O' ]; then
        echo 'prev' >$zipline
		key='o'
	elif [ "$key" == 'i' ]; then
        # requires new addpriority zipline cmd
        continue
	elif [ "$key" == 'c' ]; then
        continue
	fi

	if [ "$key" == 'o' ]; then
        echo "add ^" >$zipline
        position=$(tail -n2 <$hist | head -1 | cut -d' ' -f1)
        stty echo 
        while true; do
            read -e move
            if [ "$move" == '' ]; then
                clear
                echo 'chop' >$zipline
                break
            fi
            oldpos=$position
            position=$(fens 2>/dev/null "$(tr _ ' ' <<<$position)" <<<"$move" | tr ' ' _) 
            if [ "$position" == '' ]; then
                echo 'chop; add ^' >$zipline
                position=$oldpos
                continue
            fi
            awk '{ print "chop; add " $0 "; add ^" }' <<<"$position" >$zipline
            brd set wrm <<<"$position"
        done
        stty -echo 
	elif [ "$key" == 'J' ]; then
		echo slide >$zipline
	elif [ "$key" == 'K' ]; then
		echo lift >$zipline
	elif [ "$key" == 'H' ]; then
		echo snap >$zipline
	elif [ "$key" == 'h' ]; then
		echo climb >$zipline
	elif [ "$key" == 'L' ]; then
		echo branch >$zipline
	elif [ "$key" == 'l' ]; then
		echo fall >$zipline
	elif [ "$key" == 'g' ]; then
		read -n1 key
		if [ "$key" == 'g' ]; then
			echo root >$zipline
		elif [ "$key" == 'h' ]; then
			echo bottom >$zipline
		elif [ "$key" == 'l' ]; then
			echo top >$zipline
		fi
	elif [ "$key" == 'd' ]; then
		read -n1 key
		if [ "$key" == 'd' ]; then
            clear
			echo chop >$zipline
		elif [ "$key" == 'k' ]; then
            clear
			echo 'lift; next; chop' >$zipline
        elif [ "$key" == 'g' ]; then
            node=$(tail -1 <$hist | cut -d' ' -f1 | glyph)
            clear
            echo rename "$node" >$zipline
        else
            continue
        fi
	elif [ "$key" == 'f' ]; then
		read -n1 key
		if [ "$key" == 'f' ]; then
            #clear
			echo fold >$zipline
		elif [ "$key" == 'k' ]; then
            clear
			echo 'fold; prev' >$zipline
        fi
	elif [ "$key" == 'G' ]; then
		echo leaf >$zipline
	elif [ "$key" == '<' ]; then
        echo promote >$zipline
    elif [ "$key" == '>' ]; then
        echo 'branch; promote; branch' >$zipline
	elif [ "$key" == 'M' ]; then
		echo mainline >$zipline
    elif [ "$key" == 'e' ]; then
        vim $graph/$(tail -1 <$hist | cut -d' ' -f1 | sed 's/\///g' | sed 's/_//' | cut -d'_' -f1)  # please dry
        clear; stty -echo
		echo print >$zipline
	elif [ "$key" == 'a' ]; then
		clock=$(tail -1 <$hist | cut -d' ' -f3 | sed 's/ //')
        [ "$clock" == "-1" ] && continue
        node=$(tail -1 <$hist | cut -d' ' -f1 | glyph)
        move=$(cut -d'_' -f7 <<<"$node")
		stty echo
        read -p"$move" -e glyph
		stty -echo
		[ "$glyph" == '' ] && continue
		echo rename "$node$glyph" >$zipline
        if ! glyph "$glyph" <<<null >/dev/null; then
            clear
            echo rename "$node" >$zipline
        fi
	fi
done
