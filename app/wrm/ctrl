#!/bin/bash

tput smcup
stty -echo; tput civis

config=~/.config/wrm
mkdir -p $config

tree=${1:-$config/default}
tree=$(realpath $tree)
mkdir -p $(dirname $tree); touch $tree

graph=${GRAPH:-$config/def_graph}
graph=$(realpath $graph)

brd new wrm

tmp=$config/tmp/$$
mkdir -p $tmp
modl=$tmp/modl.fifo; mkfifo $modl
disp_lock=$tmp/disp.lock; rm -r $disp_lock 2>/dev/null
hist=$tmp/hist.txt

mode=$tmp/mode.enum
echo 'tree' >$mode

cd $(dirname $0)
./modl $tree <$modl | tee $hist | ./view $mode $graph &
echo 'print' >$modl

# TODO: recall command to delete all bg processes
trap "echo exit >$modl; rm -r $tmp; stty echo; tput cnorm; tput rmcup" EXIT #rmcup on background interupt too

while read -n1 key; do

	if [ "$key" == ':' ]; then
		while ! mkdir $disp_lock 2>/dev/null; do
			sleep 0.1
		done
		tput cup $(tput lines) 0; tput cuu1
		tput cnorm; stty echo 
		read -p':' -e line
		tput civis
		tput cuu1; tput el
		stty -echo
		rm -r $disp_lock

		if [ "$line" = 'f' ]; then
            brd flip wrm
		elif [ "$(cut -d' ' -f1 <<<$line)" = 'board' ]; then
			pieces=$(cut -d' ' -f2 <<<$line)
            brd pieces=$pieces wrm
		elif [ "$line" = 'w' ]; then
			tri grid wrm >$tree
		elif [ "$line" = 'wq' ]; then
			tri grid wrm >$tree
            clear
			exit
		elif [ "$line" = 'q' ]; then
            clear
			exit
        elif [ "$line" = 'show board' ]; then
            clear
            echo 'board' >$mode
        elif [ "$line" = 'show tree' ]; then
            clear
            echo 'tree' >$mode
        elif [ "$line" = 'show comment' ]; then
            clear
            echo 'comment' >$mode
		fi

		echo print >$modl
		continue
	fi

	if [ "$key" == 'c' ]; then
		read -n1 key
		if [ "$key" == 'c' ]; then
			echo chop >$modl
			key='m'
			sleep 0.1
		fi
	elif [ "$key" == 'M' ]; then
		echo prev >$modl
		key='m'
		sleep 0.1
	fi

	if [ "$key" == 'm' ]; then
		while ! mkdir $disp_lock 2>/dev/null; do
			sleep 0.1  #flock??
		done
		clock=$(tail -1 <$hist | cut -d' ' -f3 | sed 's/ //')
		tput cup $(tput lines) 0; tput cuu1
		tput cnorm; stty echo 
        read -p" $(mvprompt $clock)" -e move
		tput civis
		tput cuu1; tput el
		stty -echo
		rm -r $disp_lock

		[ "$move" == '' ] && continue
		echo move "$(tail -1 <$hist | cut -d' ' -f1)" $move >$modl

	elif [ "$key" == 'j' ]; then
		echo next >$modl
	elif [ "$key" == 'k' ]; then
		echo prev >$modl
	elif [ "$key" == 'J' ]; then
		echo slide >$modl
	elif [ "$key" == 'K' ]; then
		echo lift >$modl
	elif [ "$key" == 'H' ]; then
		echo branch >$modl
	elif [ "$key" == 'h' ]; then
		echo fall >$modl
	elif [ "$key" == 'L' ]; then
		echo snap >$modl
	elif [ "$key" == 'l' ]; then
		echo climb >$modl
	elif [ "$key" == 'g' ]; then
		read -n1 key
		if [ "$key" == 'g' ]; then
			echo root >$modl
		elif [ "$key" == 'h' ]; then
			echo bottom >$modl
		elif [ "$key" == 'l' ]; then
			echo top >$modl
		fi
	elif [ "$key" == 'd' ]; then
		read -n1 key
		if [ "$key" == 'd' ]; then
			echo chop >$modl
		elif [ "$key" == 'k' ]; then
			echo chop_branch >$modl
        elif [ "$key" == 'g' ]; then
            node=$(tail -1 <$hist | cut -d' ' -f1 | glyph)
            echo rename "$node" >$modl
        fi
	elif [ "$key" == 'G' ]; then
		echo leaf >$modl
	elif [ "$key" == 'u' ]; then
		echo promote >$modl
	elif [ "$key" == 'U' ]; then
		echo mainline >$modl
    elif [ "$key" == 'e' ]; then
        vim $graph/$(tail -1 <$hist | cut -d' ' -f1 | sed 's/\///g' | sed 's/_//' | cut -d'_' -f1)  # please dry
        clear; stty -echo; tput civis
		echo print >$modl
	elif [ "$key" == 'a' ]; then
		clock=$(tail -1 <$hist | cut -d' ' -f3 | sed 's/ //')
        [ "$clock" == "-1" ] && continue
        node=$(tail -1 <$hist | cut -d' ' -f1 | glyph)
        move=$(cut -d'_' -f7 <<<"$node")
		while ! mkdir $disp_lock 2>/dev/null; do
			sleep 0.1  #flock??
		done
		tput cup $(tput lines) 0; tput cuu1
		tput cnorm; stty echo 
        read -p" $(mvprompt $clock)$move" -e glyph
		tput civis
		tput cuu1; tput el
		stty -echo
		rm -r $disp_lock

		[ "$glyph" == '' ] && continue
        if ! glyph "$glyph" <<<null >/dev/null; then
            printf '\a'
            continue
        fi
		echo rename "$node$glyph" >$modl

	elif [ "$key" == 'Z' ]; then
		printf '\a'
	elif [ "$key" == 'z' ]; then
		clear
		echo print >$modl
	fi
done
