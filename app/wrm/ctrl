#!/bin/bash

tput smcup
stty -echo; tput civis

config=~/.config/wrm
mkdir -p $config
tree=${1:-$config/default}
graph=${2:-$config/def_graph}
tree=$(realpath $tree)
graph=$(realpath $graph)
mkdir -p $(dirname $tree); touch $tree #should mkdir if never saved?
tree_string=$(cut -d':' -f2 <$tree)

tmp=$config/tmp/$$
mkdir -p $tmp
modl_fifo=$tmp/modl.fifo; mkfifo $modl_fifo
disp_lock=$tmp/disp.lock; rm -r $disp_lock 2>/dev/null
hist=$tmp/hist.txt
hist=~/hist.txt
flip=$tmp/flip.bool

cd $(dirname $0)
./modl $tree <$modl_fifo | tee $hist | ./view $graph $flip $disp_lock &
echo 'print' >$modl_fifo

trap "echo exit >$modl_fifo; rm -r $tmp; tput rmcup; stty echo; tput cnorm" EXIT #rmcup on background interupt too

while read -n1 key; do

	if [ "$key" == ':' ]; then
		while ! mkdir $disp_lock 2>/dev/null; do
			sleep 0.1
		done
		tput cup $(tput lines) 0; tput cuu1
		tput cnorm; stty echo 
		read -p':' -e line
		tput civis
		tput cuu1; tput el
		stty -echo
		rm -r $disp_lock
		if [ "$line" = 'f' ]; then
			if [ -f $flip ]; then
				rm $flip
			else
				touch $flip
			fi
		elif [ "$(cut -d' ' -f1 <<<$line)" = 'board' ]; then
			cp ~/bin/$(cut -d' ' -f2 <<<$line) ~/bin/board   # have specific board disp dir
		elif [ "$line" = 'w' ]; then
			tail -1 $hist | cut -d' ' -f4 | sed 's/\],/\]/g' | tr , ' ' | tr ']' '\n' >$tree
		elif [ "$line" = 'wq' ]; then
			tail -1 $hist | cut -d' ' -f4 | sed 's/\],/\]/g' | tr , ' ' | tr ']' '\n' >$tree
			exit
		elif [ "$line" = 'q' ]; then
			exit
		elif [ "$line" == 'e' ]; then
			vim $graph/$(tail -1 <$hist | cut -d' ' -f1 | sed 's/\///g' | sed 's/_//' | cut -d'_' -f1)  # please dry
			clear; stty -echo; tput civis
		fi

		echo print >$modl_fifo
		continue
	fi

	if [ "$key" == 'c' ]; then
		read -n1 key
		if [ "$key" == 'c' ]; then
			echo chop >$modl_fifo
			key='m'
			sleep 0.1
		fi
	elif [ "$key" == 'M' ]; then
		echo prev >$modl_fifo
		key='m'
		sleep 0.1
	fi

	if [ "$key" == 'm' ]; then
		while ! mkdir $disp_lock 2>/dev/null; do
			sleep 0.1  #flock??
		done
		clock=$(tail -1 <$hist | cut -d' ' -f3 | sed 's/ //')
		tput cup $(tput lines) 0; tput cuu1
		tput cnorm; stty echo 
        read -p" $(mvprompt $clock)" -e move
		tput civis
		tput cuu1; tput el
		stty -echo
		rm -r $disp_lock

		[ "$move" == '' ] && continue
		echo move "$(tail -1 <$hist | cut -d' ' -f1)" $move >$modl_fifo

	elif [ "$key" == 'j' ]; then
		echo next >$modl_fifo
	elif [ "$key" == 'k' ]; then
		echo prev >$modl_fifo
	elif [ "$key" == 'J' ]; then
		echo slide >$modl_fifo
	elif [ "$key" == 'K' ]; then
		echo lift >$modl_fifo
	elif [ "$key" == 'H' ]; then
		echo branch >$modl_fifo
	elif [ "$key" == 'h' ]; then
		echo fall >$modl_fifo
	elif [ "$key" == 'L' ]; then
		echo snap >$modl_fifo
	elif [ "$key" == 'l' ]; then
		echo climb >$modl_fifo
	elif [ "$key" == 'g' ]; then
		read -n1 key
		if [ "$key" == 'g' ]; then
			echo root >$modl_fifo
		elif [ "$key" == 'h' ]; then
			echo bottom >$modl_fifo
		elif [ "$key" == 'l' ]; then
			echo top >$modl_fifo
		fi
	elif [ "$key" == 'd' ]; then
		read -n1 key
		if [ "$key" == 'd' ]; then
			echo chop >$modl_fifo
		elif [ "$key" == 'k' ]; then
			echo chop_branch >$modl_fifo
        elif [ "$key" == 'g' ]; then
            node=$(tail -1 <$hist | cut -d' ' -f1 | glyph)
            echo rename "$node" >$modl_fifo
        fi
	elif [ "$key" == 'G' ]; then
		echo leaf >$modl_fifo
	elif [ "$key" == 'u' ]; then
		echo promote >$modl_fifo
	elif [ "$key" == 'U' ]; then
		echo mainline >$modl_fifo

	elif [ "$key" == 'a' ]; then
		clock=$(tail -1 <$hist | cut -d' ' -f3 | sed 's/ //')
        [ "$clock" == "-1" ] && continue
        node=$(tail -1 <$hist | cut -d' ' -f1 | glyph)
        move=$(cut -d'_' -f7 <<<"$node")
		while ! mkdir $disp_lock 2>/dev/null; do
			sleep 0.1  #flock??
		done
		tput cup $(tput lines) 0; tput cuu1
		tput cnorm; stty echo 
        read -p" $(mvprompt $clock)$move" -e glyph
		tput civis
		tput cuu1; tput el
		stty -echo
		rm -r $disp_lock

		[ "$glyph" == '' ] && continue
        if ! glyph "$glyph" <<<null >/dev/null; then
            printf '\a'
            continue
        fi
		echo rename "$node$glyph" >$modl_fifo

	elif [ "$key" == 'Z' ]; then
		printf '\a'
	elif [ "$key" == 'z' ]; then
		clear
		echo print >$modl_fifo
	fi
done
